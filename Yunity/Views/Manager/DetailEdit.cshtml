@model Yunity.Models.CManagerWrap
@{
    ViewData["Title"] = "詳細 & 編輯資料";
}

<div id="detailSection">
    <h2>詳細資料</h2>
    <div class="form-group">
        <label>姓名</label>
        <p>@Html.DisplayFor(m => m.FName)</p>
    </div>
    <div class="form-group">
        <label>大樓</label>
        <p>@Html.DisplayFor(m => m.BuildingName)</p>
    </div>
    <div class="form-group">
        <label>電話</label>
        <p>@Html.DisplayFor(m => m.FPhone)</p>
    </div>
    <div class="form-group">
        <label>Email</label>
        <p>@Html.DisplayFor(m => m.FEmail)</p>
    </div>
    <div class="form-group">
        <label>審核狀態</label>
        <p>@Html.DisplayFor(m => m.IsApproved)</p>
    </div>

    <button id="btnEdit" class="btn btn-primary">編輯</button>
</div>

<div id="editSection" style="display:none;">
    <h2>編輯資料</h2>
    @using (Html.BeginForm("Edit", "Manager", FormMethod.Post, new { id = "editForm" }))
    {
        @Html.AntiForgeryToken()

        @Html.HiddenFor(m => m.FId)
        @Html.HiddenFor(m => m.FAspUserId)

        <div class="form-group">
            @Html.LabelFor(m => m.FName, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(m => m.FName, new { htmlAttributes = new { @class = "form-control", required = "required" } })
            @Html.ValidationMessageFor(m => m.FName, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.FBuildingId, "大樓", new { @class = "control-label" })
            @Html.DropDownListFor(m => m.FBuildingId, Model.BuildingsList, "-- 請選擇大樓 --", new { @class = "form-control", required = "required" })
            @Html.ValidationMessageFor(m => m.FBuildingId, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.FPhone, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(m => m.FPhone, new { htmlAttributes = new { @class = "form-control", required = "required" } })
            @Html.ValidationMessageFor(m => m.FPhone, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.FEmail, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(m => m.FEmail, new { htmlAttributes = new { @class = "form-control", type = "email", required = "required" } })
            @Html.ValidationMessageFor(m => m.FEmail, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            <label>審核狀態</label>
            <select asp-for="IsApproved" class="form-control" required>
                <option value="Pending">待審核</option>
                <option value="Approved">已核准</option>
                <option value="Cancel">已取消</option>
            </select>
            @Html.ValidationMessageFor(m => m.IsApproved, "", new { @class = "text-danger" })
        </div>

        <div class="form-group mt-3">
            <button type="submit" class="btn btn-success">儲存</button>
            <button type="button" id="btnCancel" class="btn btn-secondary">取消</button>
        </div>
    }
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            // 切換至編輯模式
            $("#btnEdit").click(function () {
                $("#detailSection").hide();
                $("#editSection").show();
            });

            // 取消編輯，返回詳細模式
            $("#btnCancel").click(function () {
                $("#editSection").hide();
                $("#detailSection").show();
            });

            // 表單提交事件
            $("#editForm").submit(function () {
                console.log("Form Submitted!");
            });
        });
    </script>
}
